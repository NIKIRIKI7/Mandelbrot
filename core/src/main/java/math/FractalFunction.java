// File: core/src/main/java/math/FractalFunction.java
package math;

import utils.ComplexNumber;
import java.io.Serializable;

/**
 * Функциональный интерфейс, представляющий собой стратегию вычисления
 * количества итераций для точки в некотором фрактальном множестве.
 * <p>
 * Этот интерфейс позволяет абстрагироваться от конкретного типа фрактала
 * (например, Мандельброт, Жюлиа, Пальцы Будды и т.д.), предоставляя единый
 * метод {@link #calculateIterations(ComplexNumber, ComplexNumber, int)} для расчета.
 * </p><p>
 * Реализации этого интерфейса должны быть {@link Serializable}, чтобы
 * {@link model.FractalState}, содержащий функцию, можно было сохранять
 * и загружать.
 * </p>
 */
@FunctionalInterface
public interface FractalFunction extends Serializable {
    /**
     * Версия для сериализации. Необходима для {@link Serializable} интерфейсов.
     */
    long serialVersionUID = 1L;

    /**
     * Вычисляет количество итераций для заданной начальной точки {@code z0}
     * и параметра {@code c} до выхода за некоторый предел или до достижения
     * максимального числа итераций.
     * <p>
     * Семантика параметров {@code z0} и {@code c} зависит от конкретной реализации
     * (конкретного типа фрактала):
     * <ul>
     *     <li>Для множества Мандельброта: {@code z0} обычно игнорируется (всегда 0),
     *         а {@code c} - это точка комплексной плоскости, для которой проверяется принадлежность.</li>
     *     <li>Для множества Жюлиа {@code J(c)}: {@code z0} - это точка комплексной плоскости,
     *         для которой проверяется принадлежность, а {@code c} - константный параметр,
     *         определяющий данное множество (реализация обычно хранит свой {@code c}
     *         и может игнорировать переданный параметр {@code c}).</li>
     * </ul>
     *
     * @param z0            Начальная точка итерации (обычно точка комплексной плоскости для проверки).
     * @param c             Параметр функции (например, точка для Мандельброта или константа для Жюлиа).
     * @param maxIterations Максимальное количество итераций, после которого точка считается
     *                      принадлежащей множеству, если она не вышла за предел.
     * @return Количество выполненных итераций до выхода за предел (обычно от 0 до {@code maxIterations - 1}),
     *         или {@code maxIterations}, если точка считается принадлежащей множеству.
     */
    int calculateIterations(ComplexNumber z0, ComplexNumber c, int maxIterations);

    /**
     * Возвращает имя функции фрактала.
     * Может использоваться для отображения в пользовательском интерфейсе или для отладки.
     * Реализация по умолчанию возвращает простое имя класса реализации.
     *
     * @return Строка с именем функции фрактала.
     */
    default String getName() {
        return this.getClass().getSimpleName();
    }

    // Реализации должны переопределять equals() и hashCode(),
    // особенно если функция имеет состояние (например, параметр 'c' в JuliaFunction),
    // для корректного сравнения FractalState.
}